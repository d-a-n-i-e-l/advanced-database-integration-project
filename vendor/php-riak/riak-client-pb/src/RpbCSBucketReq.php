<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbCSBucketReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbCSBucketReq');

            // required bytes bucket = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required bytes start_key = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "start_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes end_key = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "end_key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool start_incl = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "start_incl";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = true;

            $descriptor->addField($f);

            // optional bool end_incl = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "end_incl";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = false;

            $descriptor->addField($f);

            // optional bytes continuation = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "continuation";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional uint32 max_results = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "max_results";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 timeout = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "timeout";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes type = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        /**
         * Get "bucket" value
         * @return string                  *
         *
         */
        public function getBucket()
        {
            return $this->bucket;
        }

        /**
         * Set "bucket" value
         *
         * @param string $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Check if "start_key" has a value
         *
         * @return boolean
         */
        public function hasStartKey()
        {
            return isset($this->start_key);
        }

        /**
         * Clear "start_key" value
         */
        public function clearStartKey()
        {
            unset($this->start_key);
        }

        /**
         * Get "start_key" value
         * @return string                  *
         *
         */
        public function getStartKey()
        {
            return $this->start_key;
        }

        /**
         * Set "start_key" value
         *
         * @param string $value
         */
        public function setStartKey($value)
        {
            return $this->start_key = $value;
        }

        /**
         * Check if "end_key" has a value
         *
         * @return boolean
         */
        public function hasEndKey()
        {
            return isset($this->end_key);
        }

        /**
         * Clear "end_key" value
         */
        public function clearEndKey()
        {
            unset($this->end_key);
        }

        /**
         * Get "end_key" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getEndKey()
        {
            return \PhpOption\Option::fromValue($this->end_key);
        }

        /**
         * Set "end_key" value
         *
         * @param string $value
         */
        public function setEndKey($value)
        {
            return $this->end_key = $value;
        }

        /**
         * Check if "start_incl" has a value
         *
         * @return boolean
         */
        public function hasStartIncl()
        {
            return isset($this->start_incl);
        }

        /**
         * Clear "start_incl" value
         */
        public function clearStartIncl()
        {
            unset($this->start_incl);
        }

        /**
         * Get "start_incl" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getStartIncl()
        {
            return \PhpOption\Option::fromValue($this->start_incl);
        }

        /**
         * Set "start_incl" value
         *
         * @param boolean $value
         */
        public function setStartIncl($value)
        {
            return $this->start_incl = $value;
        }

        /**
         * Check if "end_incl" has a value
         *
         * @return boolean
         */
        public function hasEndIncl()
        {
            return isset($this->end_incl);
        }

        /**
         * Clear "end_incl" value
         */
        public function clearEndIncl()
        {
            unset($this->end_incl);
        }

        /**
         * Get "end_incl" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getEndIncl()
        {
            return \PhpOption\Option::fromValue($this->end_incl);
        }

        /**
         * Set "end_incl" value
         *
         * @param boolean $value
         */
        public function setEndIncl($value)
        {
            return $this->end_incl = $value;
        }

        /**
         * Check if "continuation" has a value
         *
         * @return boolean
         */
        public function hasContinuation()
        {
            return isset($this->continuation);
        }

        /**
         * Clear "continuation" value
         */
        public function clearContinuation()
        {
            unset($this->continuation);
        }

        /**
         * Get "continuation" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContinuation()
        {
            return \PhpOption\Option::fromValue($this->continuation);
        }

        /**
         * Set "continuation" value
         *
         * @param string $value
         */
        public function setContinuation($value)
        {
            return $this->continuation = $value;
        }

        /**
         * Check if "max_results" has a value
         *
         * @return boolean
         */
        public function hasMaxResults()
        {
            return isset($this->max_results);
        }

        /**
         * Clear "max_results" value
         */
        public function clearMaxResults()
        {
            unset($this->max_results);
        }

        /**
         * Get "max_results" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getMaxResults()
        {
            return \PhpOption\Option::fromValue($this->max_results);
        }

        /**
         * Set "max_results" value
         *
         * @param int $value
         */
        public function setMaxResults($value)
        {
            return $this->max_results = $value;
        }

        /**
         * Check if "timeout" has a value
         *
         * @return boolean
         */
        public function hasTimeout()
        {
            return isset($this->timeout);
        }

        /**
         * Clear "timeout" value
         */
        public function clearTimeout()
        {
            unset($this->timeout);
        }

        /**
         * Get "timeout" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getTimeout()
        {
            return \PhpOption\Option::fromValue($this->timeout);
        }

        /**
         * Set "timeout" value
         *
         * @param int $value
         */
        public function setTimeout($value)
        {
            return $this->timeout = $value;
        }

        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        /**
         * Get "type" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getType()
        {
            return \PhpOption\Option::fromValue($this->type);
        }

        /**
         * Set "type" value
         *
         * @param string $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }
    }
}
