<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class DtUpdateReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.DtUpdateReq');

            // required bytes bucket = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes key = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required bytes type = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes context = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "context";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required message op = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "op";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\DtOp';

            $descriptor->addField($f);

            // optional uint32 w = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "w";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 dw = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "dw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 pw = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "pw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool return_body = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "return_body";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = false;

            $descriptor->addField($f);

            // optional uint32 timeout = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "timeout";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool sloppy_quorum = 11
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "sloppy_quorum";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional uint32 n_val = 12
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 12;
            $f->name   = "n_val";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool include_context = 13
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 13;
            $f->name   = "include_context";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = true;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        /**
         * Get "bucket" value
         * @return string                  *
         *
         */
        public function getBucket()
        {
            return $this->bucket;
        }

        /**
         * Set "bucket" value
         *
         * @param string $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Check if "key" has a value
         *
         * @return boolean
         */
        public function hasKey()
        {
            return isset($this->key);
        }

        /**
         * Clear "key" value
         */
        public function clearKey()
        {
            unset($this->key);
        }

        /**
         * Get "key" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getKey()
        {
            return \PhpOption\Option::fromValue($this->key);
        }

        /**
         * Set "key" value
         *
         * @param string $value
         */
        public function setKey($value)
        {
            return $this->key = $value;
        }

        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        /**
         * Get "type" value
         * @return string                  *
         *
         */
        public function getType()
        {
            return $this->type;
        }

        /**
         * Set "type" value
         *
         * @param string $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        /**
         * Check if "context" has a value
         *
         * @return boolean
         */
        public function hasContext()
        {
            return isset($this->context);
        }

        /**
         * Clear "context" value
         */
        public function clearContext()
        {
            unset($this->context);
        }

        /**
         * Get "context" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContext()
        {
            return \PhpOption\Option::fromValue($this->context);
        }

        /**
         * Set "context" value
         *
         * @param string $value
         */
        public function setContext($value)
        {
            return $this->context = $value;
        }

        /**
         * Check if "op" has a value
         *
         * @return boolean
         */
        public function hasOp()
        {
            return isset($this->op);
        }

        /**
         * Clear "op" value
         */
        public function clearOp()
        {
            unset($this->op);
        }

        /**
         * Get "op" value
         * @return DtOp                  *
         *
         */
        public function getOp()
        {
            return $this->op;
        }

        /**
         * Set "op" value
         *
         * @param DtOp $value
         */
        public function setOp($value)
        {
            return $this->op = $value;
        }

        /**
         * Check if "w" has a value
         *
         * @return boolean
         */
        public function hasW()
        {
            return isset($this->w);
        }

        /**
         * Clear "w" value
         */
        public function clearW()
        {
            unset($this->w);
        }

        /**
         * Get "w" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getW()
        {
            return \PhpOption\Option::fromValue($this->w);
        }

        /**
         * Set "w" value
         *
         * @param int $value
         */
        public function setW($value)
        {
            return $this->w = $value;
        }

        /**
         * Check if "dw" has a value
         *
         * @return boolean
         */
        public function hasDw()
        {
            return isset($this->dw);
        }

        /**
         * Clear "dw" value
         */
        public function clearDw()
        {
            unset($this->dw);
        }

        /**
         * Get "dw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getDw()
        {
            return \PhpOption\Option::fromValue($this->dw);
        }

        /**
         * Set "dw" value
         *
         * @param int $value
         */
        public function setDw($value)
        {
            return $this->dw = $value;
        }

        /**
         * Check if "pw" has a value
         *
         * @return boolean
         */
        public function hasPw()
        {
            return isset($this->pw);
        }

        /**
         * Clear "pw" value
         */
        public function clearPw()
        {
            unset($this->pw);
        }

        /**
         * Get "pw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPw()
        {
            return \PhpOption\Option::fromValue($this->pw);
        }

        /**
         * Set "pw" value
         *
         * @param int $value
         */
        public function setPw($value)
        {
            return $this->pw = $value;
        }

        /**
         * Check if "return_body" has a value
         *
         * @return boolean
         */
        public function hasReturnBody()
        {
            return isset($this->return_body);
        }

        /**
         * Clear "return_body" value
         */
        public function clearReturnBody()
        {
            unset($this->return_body);
        }

        /**
         * Get "return_body" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getReturnBody()
        {
            return \PhpOption\Option::fromValue($this->return_body);
        }

        /**
         * Set "return_body" value
         *
         * @param boolean $value
         */
        public function setReturnBody($value)
        {
            return $this->return_body = $value;
        }

        /**
         * Check if "timeout" has a value
         *
         * @return boolean
         */
        public function hasTimeout()
        {
            return isset($this->timeout);
        }

        /**
         * Clear "timeout" value
         */
        public function clearTimeout()
        {
            unset($this->timeout);
        }

        /**
         * Get "timeout" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getTimeout()
        {
            return \PhpOption\Option::fromValue($this->timeout);
        }

        /**
         * Set "timeout" value
         *
         * @param int $value
         */
        public function setTimeout($value)
        {
            return $this->timeout = $value;
        }

        /**
         * Check if "sloppy_quorum" has a value
         *
         * @return boolean
         */
        public function hasSloppyQuorum()
        {
            return isset($this->sloppy_quorum);
        }

        /**
         * Clear "sloppy_quorum" value
         */
        public function clearSloppyQuorum()
        {
            unset($this->sloppy_quorum);
        }

        /**
         * Get "sloppy_quorum" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getSloppyQuorum()
        {
            return \PhpOption\Option::fromValue($this->sloppy_quorum);
        }

        /**
         * Set "sloppy_quorum" value
         *
         * @param boolean $value
         */
        public function setSloppyQuorum($value)
        {
            return $this->sloppy_quorum = $value;
        }

        /**
         * Check if "n_val" has a value
         *
         * @return boolean
         */
        public function hasNVal()
        {
            return isset($this->n_val);
        }

        /**
         * Clear "n_val" value
         */
        public function clearNVal()
        {
            unset($this->n_val);
        }

        /**
         * Get "n_val" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getNVal()
        {
            return \PhpOption\Option::fromValue($this->n_val);
        }

        /**
         * Set "n_val" value
         *
         * @param int $value
         */
        public function setNVal($value)
        {
            return $this->n_val = $value;
        }

        /**
         * Check if "include_context" has a value
         *
         * @return boolean
         */
        public function hasIncludeContext()
        {
            return isset($this->include_context);
        }

        /**
         * Clear "include_context" value
         */
        public function clearIncludeContext()
        {
            unset($this->include_context);
        }

        /**
         * Get "include_context" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getIncludeContext()
        {
            return \PhpOption\Option::fromValue($this->include_context);
        }

        /**
         * Set "include_context" value
         *
         * @param boolean $value
         */
        public function setIncludeContext($value)
        {
            return $this->include_context = $value;
        }
    }
}
