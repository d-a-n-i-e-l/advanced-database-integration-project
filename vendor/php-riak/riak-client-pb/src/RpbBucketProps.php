<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbBucketProps extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbBucketProps');

            // optional uint32 n_val = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "n_val";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool allow_mult = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "allow_mult";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool last_write_wins = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "last_write_wins";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // repeated message precommit = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "precommit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbCommitHook';

            $descriptor->addField($f);

            // optional bool has_precommit = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "has_precommit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = false;

            $descriptor->addField($f);

            // repeated message postcommit = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "postcommit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbCommitHook';

            $descriptor->addField($f);

            // optional bool has_postcommit = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "has_postcommit";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $f->default = false;

            $descriptor->addField($f);

            // optional message chash_keyfun = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "chash_keyfun";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbModFun';

            $descriptor->addField($f);

            // optional message linkfun = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "linkfun";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbModFun';

            $descriptor->addField($f);

            // optional uint32 old_vclock = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "old_vclock";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 young_vclock = 11
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "young_vclock";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 big_vclock = 12
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 12;
            $f->name   = "big_vclock";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 small_vclock = 13
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 13;
            $f->name   = "small_vclock";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 pr = 14
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 14;
            $f->name   = "pr";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 r = 15
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "r";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 w = 16
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 16;
            $f->name   = "w";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 pw = 17
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 17;
            $f->name   = "pw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 dw = 18
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 18;
            $f->name   = "dw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 rw = 19
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 19;
            $f->name   = "rw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool basic_quorum = 20
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 20;
            $f->name   = "basic_quorum";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool notfound_ok = 21
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 21;
            $f->name   = "notfound_ok";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bytes backend = 22
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 22;
            $f->name   = "backend";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool search = 23
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 23;
            $f->name   = "search";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional enum repl = 24
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 24;
            $f->name   = "repl";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;

            $f->reference = '\Riak\Client\ProtoBuf\RpbBucketProps\RpbReplMode';

            $descriptor->addField($f);

            // optional bytes search_index = 25
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 25;
            $f->name   = "search_index";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes datatype = 26
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 26;
            $f->name   = "datatype";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool consistent = 27
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 27;
            $f->name   = "consistent";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "n_val" has a value
         *
         * @return boolean
         */
        public function hasNVal()
        {
            return isset($this->n_val);
        }

        /**
         * Clear "n_val" value
         */
        public function clearNVal()
        {
            unset($this->n_val);
        }

        /**
         * Get "n_val" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getNVal()
        {
            return \PhpOption\Option::fromValue($this->n_val);
        }

        /**
         * Set "n_val" value
         *
         * @param int $value
         */
        public function setNVal($value)
        {
            return $this->n_val = $value;
        }

        /**
         * Check if "allow_mult" has a value
         *
         * @return boolean
         */
        public function hasAllowMult()
        {
            return isset($this->allow_mult);
        }

        /**
         * Clear "allow_mult" value
         */
        public function clearAllowMult()
        {
            unset($this->allow_mult);
        }

        /**
         * Get "allow_mult" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getAllowMult()
        {
            return \PhpOption\Option::fromValue($this->allow_mult);
        }

        /**
         * Set "allow_mult" value
         *
         * @param boolean $value
         */
        public function setAllowMult($value)
        {
            return $this->allow_mult = $value;
        }

        /**
         * Check if "last_write_wins" has a value
         *
         * @return boolean
         */
        public function hasLastWriteWins()
        {
            return isset($this->last_write_wins);
        }

        /**
         * Clear "last_write_wins" value
         */
        public function clearLastWriteWins()
        {
            unset($this->last_write_wins);
        }

        /**
         * Get "last_write_wins" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getLastWriteWins()
        {
            return \PhpOption\Option::fromValue($this->last_write_wins);
        }

        /**
         * Set "last_write_wins" value
         *
         * @param boolean $value
         */
        public function setLastWriteWins($value)
        {
            return $this->last_write_wins = $value;
        }

        /**
         * Check if "precommit" has a value
         *
         * @return boolean
         */
        public function hasPrecommit()
        {
            return isset($this->precommit);
        }

        /**
         * Clear "precommit" value
         */
        public function clearPrecommit()
        {
            unset($this->precommit);
        }

        /**
         * Get "precommit" value
         *
         * @return \PhpOption\Option of type RpbCommitHook[]
         */
        public function getPrecommit($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->precommit)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->precommit[$idx]);
        }

        /**
         * Get "precommit" list of values
         *
         * @return RpbCommitHook[]
         */
        public function getPrecommitList()
        {
            return $this->precommit;
        }

        /**
         * Set "precommit" value
         *
         * @param RpbCommitHook[] $value
         */
        public function setPrecommit($value)
        {
            return $this->precommit = $value;
        }

        /**
         * Add a new element to "precommit"
         *
         * @param RpbCommitHook $value
         */
        public function addPrecommit($value)
        {
            $this->precommit[] = $value;
        }

        /**
         * Check if "has_precommit" has a value
         *
         * @return boolean
         */
        public function hasHasPrecommit()
        {
            return isset($this->has_precommit);
        }

        /**
         * Clear "has_precommit" value
         */
        public function clearHasPrecommit()
        {
            unset($this->has_precommit);
        }

        /**
         * Get "has_precommit" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getHasPrecommit()
        {
            return \PhpOption\Option::fromValue($this->has_precommit);
        }

        /**
         * Set "has_precommit" value
         *
         * @param boolean $value
         */
        public function setHasPrecommit($value)
        {
            return $this->has_precommit = $value;
        }

        /**
         * Check if "postcommit" has a value
         *
         * @return boolean
         */
        public function hasPostcommit()
        {
            return isset($this->postcommit);
        }

        /**
         * Clear "postcommit" value
         */
        public function clearPostcommit()
        {
            unset($this->postcommit);
        }

        /**
         * Get "postcommit" value
         *
         * @return \PhpOption\Option of type RpbCommitHook[]
         */
        public function getPostcommit($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->postcommit)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->postcommit[$idx]);
        }

        /**
         * Get "postcommit" list of values
         *
         * @return RpbCommitHook[]
         */
        public function getPostcommitList()
        {
            return $this->postcommit;
        }

        /**
         * Set "postcommit" value
         *
         * @param RpbCommitHook[] $value
         */
        public function setPostcommit($value)
        {
            return $this->postcommit = $value;
        }

        /**
         * Add a new element to "postcommit"
         *
         * @param RpbCommitHook $value
         */
        public function addPostcommit($value)
        {
            $this->postcommit[] = $value;
        }

        /**
         * Check if "has_postcommit" has a value
         *
         * @return boolean
         */
        public function hasHasPostcommit()
        {
            return isset($this->has_postcommit);
        }

        /**
         * Clear "has_postcommit" value
         */
        public function clearHasPostcommit()
        {
            unset($this->has_postcommit);
        }

        /**
         * Get "has_postcommit" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getHasPostcommit()
        {
            return \PhpOption\Option::fromValue($this->has_postcommit);
        }

        /**
         * Set "has_postcommit" value
         *
         * @param boolean $value
         */
        public function setHasPostcommit($value)
        {
            return $this->has_postcommit = $value;
        }

        /**
         * Check if "chash_keyfun" has a value
         *
         * @return boolean
         */
        public function hasChashKeyfun()
        {
            return isset($this->chash_keyfun);
        }

        /**
         * Clear "chash_keyfun" value
         */
        public function clearChashKeyfun()
        {
            unset($this->chash_keyfun);
        }

        /**
         * Get "chash_keyfun" value
         * @return \PhpOption\Option of type (RpbModFun)
         *
         *
         */
        public function getChashKeyfun()
        {
            return \PhpOption\Option::fromValue($this->chash_keyfun);
        }

        /**
         * Set "chash_keyfun" value
         *
         * @param RpbModFun $value
         */
        public function setChashKeyfun($value)
        {
            return $this->chash_keyfun = $value;
        }

        /**
         * Check if "linkfun" has a value
         *
         * @return boolean
         */
        public function hasLinkfun()
        {
            return isset($this->linkfun);
        }

        /**
         * Clear "linkfun" value
         */
        public function clearLinkfun()
        {
            unset($this->linkfun);
        }

        /**
         * Get "linkfun" value
         * @return \PhpOption\Option of type (RpbModFun)
         *
         *
         */
        public function getLinkfun()
        {
            return \PhpOption\Option::fromValue($this->linkfun);
        }

        /**
         * Set "linkfun" value
         *
         * @param RpbModFun $value
         */
        public function setLinkfun($value)
        {
            return $this->linkfun = $value;
        }

        /**
         * Check if "old_vclock" has a value
         *
         * @return boolean
         */
        public function hasOldVclock()
        {
            return isset($this->old_vclock);
        }

        /**
         * Clear "old_vclock" value
         */
        public function clearOldVclock()
        {
            unset($this->old_vclock);
        }

        /**
         * Get "old_vclock" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getOldVclock()
        {
            return \PhpOption\Option::fromValue($this->old_vclock);
        }

        /**
         * Set "old_vclock" value
         *
         * @param int $value
         */
        public function setOldVclock($value)
        {
            return $this->old_vclock = $value;
        }

        /**
         * Check if "young_vclock" has a value
         *
         * @return boolean
         */
        public function hasYoungVclock()
        {
            return isset($this->young_vclock);
        }

        /**
         * Clear "young_vclock" value
         */
        public function clearYoungVclock()
        {
            unset($this->young_vclock);
        }

        /**
         * Get "young_vclock" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getYoungVclock()
        {
            return \PhpOption\Option::fromValue($this->young_vclock);
        }

        /**
         * Set "young_vclock" value
         *
         * @param int $value
         */
        public function setYoungVclock($value)
        {
            return $this->young_vclock = $value;
        }

        /**
         * Check if "big_vclock" has a value
         *
         * @return boolean
         */
        public function hasBigVclock()
        {
            return isset($this->big_vclock);
        }

        /**
         * Clear "big_vclock" value
         */
        public function clearBigVclock()
        {
            unset($this->big_vclock);
        }

        /**
         * Get "big_vclock" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getBigVclock()
        {
            return \PhpOption\Option::fromValue($this->big_vclock);
        }

        /**
         * Set "big_vclock" value
         *
         * @param int $value
         */
        public function setBigVclock($value)
        {
            return $this->big_vclock = $value;
        }

        /**
         * Check if "small_vclock" has a value
         *
         * @return boolean
         */
        public function hasSmallVclock()
        {
            return isset($this->small_vclock);
        }

        /**
         * Clear "small_vclock" value
         */
        public function clearSmallVclock()
        {
            unset($this->small_vclock);
        }

        /**
         * Get "small_vclock" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getSmallVclock()
        {
            return \PhpOption\Option::fromValue($this->small_vclock);
        }

        /**
         * Set "small_vclock" value
         *
         * @param int $value
         */
        public function setSmallVclock($value)
        {
            return $this->small_vclock = $value;
        }

        /**
         * Check if "pr" has a value
         *
         * @return boolean
         */
        public function hasPr()
        {
            return isset($this->pr);
        }

        /**
         * Clear "pr" value
         */
        public function clearPr()
        {
            unset($this->pr);
        }

        /**
         * Get "pr" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPr()
        {
            return \PhpOption\Option::fromValue($this->pr);
        }

        /**
         * Set "pr" value
         *
         * @param int $value
         */
        public function setPr($value)
        {
            return $this->pr = $value;
        }

        /**
         * Check if "r" has a value
         *
         * @return boolean
         */
        public function hasR()
        {
            return isset($this->r);
        }

        /**
         * Clear "r" value
         */
        public function clearR()
        {
            unset($this->r);
        }

        /**
         * Get "r" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getR()
        {
            return \PhpOption\Option::fromValue($this->r);
        }

        /**
         * Set "r" value
         *
         * @param int $value
         */
        public function setR($value)
        {
            return $this->r = $value;
        }

        /**
         * Check if "w" has a value
         *
         * @return boolean
         */
        public function hasW()
        {
            return isset($this->w);
        }

        /**
         * Clear "w" value
         */
        public function clearW()
        {
            unset($this->w);
        }

        /**
         * Get "w" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getW()
        {
            return \PhpOption\Option::fromValue($this->w);
        }

        /**
         * Set "w" value
         *
         * @param int $value
         */
        public function setW($value)
        {
            return $this->w = $value;
        }

        /**
         * Check if "pw" has a value
         *
         * @return boolean
         */
        public function hasPw()
        {
            return isset($this->pw);
        }

        /**
         * Clear "pw" value
         */
        public function clearPw()
        {
            unset($this->pw);
        }

        /**
         * Get "pw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPw()
        {
            return \PhpOption\Option::fromValue($this->pw);
        }

        /**
         * Set "pw" value
         *
         * @param int $value
         */
        public function setPw($value)
        {
            return $this->pw = $value;
        }

        /**
         * Check if "dw" has a value
         *
         * @return boolean
         */
        public function hasDw()
        {
            return isset($this->dw);
        }

        /**
         * Clear "dw" value
         */
        public function clearDw()
        {
            unset($this->dw);
        }

        /**
         * Get "dw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getDw()
        {
            return \PhpOption\Option::fromValue($this->dw);
        }

        /**
         * Set "dw" value
         *
         * @param int $value
         */
        public function setDw($value)
        {
            return $this->dw = $value;
        }

        /**
         * Check if "rw" has a value
         *
         * @return boolean
         */
        public function hasRw()
        {
            return isset($this->rw);
        }

        /**
         * Clear "rw" value
         */
        public function clearRw()
        {
            unset($this->rw);
        }

        /**
         * Get "rw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getRw()
        {
            return \PhpOption\Option::fromValue($this->rw);
        }

        /**
         * Set "rw" value
         *
         * @param int $value
         */
        public function setRw($value)
        {
            return $this->rw = $value;
        }

        /**
         * Check if "basic_quorum" has a value
         *
         * @return boolean
         */
        public function hasBasicQuorum()
        {
            return isset($this->basic_quorum);
        }

        /**
         * Clear "basic_quorum" value
         */
        public function clearBasicQuorum()
        {
            unset($this->basic_quorum);
        }

        /**
         * Get "basic_quorum" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getBasicQuorum()
        {
            return \PhpOption\Option::fromValue($this->basic_quorum);
        }

        /**
         * Set "basic_quorum" value
         *
         * @param boolean $value
         */
        public function setBasicQuorum($value)
        {
            return $this->basic_quorum = $value;
        }

        /**
         * Check if "notfound_ok" has a value
         *
         * @return boolean
         */
        public function hasNotfoundOk()
        {
            return isset($this->notfound_ok);
        }

        /**
         * Clear "notfound_ok" value
         */
        public function clearNotfoundOk()
        {
            unset($this->notfound_ok);
        }

        /**
         * Get "notfound_ok" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getNotfoundOk()
        {
            return \PhpOption\Option::fromValue($this->notfound_ok);
        }

        /**
         * Set "notfound_ok" value
         *
         * @param boolean $value
         */
        public function setNotfoundOk($value)
        {
            return $this->notfound_ok = $value;
        }

        /**
         * Check if "backend" has a value
         *
         * @return boolean
         */
        public function hasBackend()
        {
            return isset($this->backend);
        }

        /**
         * Clear "backend" value
         */
        public function clearBackend()
        {
            unset($this->backend);
        }

        /**
         * Get "backend" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getBackend()
        {
            return \PhpOption\Option::fromValue($this->backend);
        }

        /**
         * Set "backend" value
         *
         * @param string $value
         */
        public function setBackend($value)
        {
            return $this->backend = $value;
        }

        /**
         * Check if "search" has a value
         *
         * @return boolean
         */
        public function hasSearch()
        {
            return isset($this->search);
        }

        /**
         * Clear "search" value
         */
        public function clearSearch()
        {
            unset($this->search);
        }

        /**
         * Get "search" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getSearch()
        {
            return \PhpOption\Option::fromValue($this->search);
        }

        /**
         * Set "search" value
         *
         * @param boolean $value
         */
        public function setSearch($value)
        {
            return $this->search = $value;
        }

        /**
         * Check if "repl" has a value
         *
         * @return boolean
         */
        public function hasRepl()
        {
            return isset($this->repl);
        }

        /**
         * Clear "repl" value
         */
        public function clearRepl()
        {
            unset($this->repl);
        }

        /**
         * Get "repl" value
         * @return \PhpOption\Option of type (int - RpbBucketProps\RpbReplMode)
         *
         *
         */
        public function getRepl()
        {
            return \PhpOption\Option::fromValue($this->repl);
        }

        /**
         * Set "repl" value
         *
         * @param int - RpbBucketProps\RpbReplMode $value
         */
        public function setRepl($value)
        {
            return $this->repl = $value;
        }

        /**
         * Check if "search_index" has a value
         *
         * @return boolean
         */
        public function hasSearchIndex()
        {
            return isset($this->search_index);
        }

        /**
         * Clear "search_index" value
         */
        public function clearSearchIndex()
        {
            unset($this->search_index);
        }

        /**
         * Get "search_index" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getSearchIndex()
        {
            return \PhpOption\Option::fromValue($this->search_index);
        }

        /**
         * Set "search_index" value
         *
         * @param string $value
         */
        public function setSearchIndex($value)
        {
            return $this->search_index = $value;
        }

        /**
         * Check if "datatype" has a value
         *
         * @return boolean
         */
        public function hasDatatype()
        {
            return isset($this->datatype);
        }

        /**
         * Clear "datatype" value
         */
        public function clearDatatype()
        {
            unset($this->datatype);
        }

        /**
         * Get "datatype" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getDatatype()
        {
            return \PhpOption\Option::fromValue($this->datatype);
        }

        /**
         * Set "datatype" value
         *
         * @param string $value
         */
        public function setDatatype($value)
        {
            return $this->datatype = $value;
        }

        /**
         * Check if "consistent" has a value
         *
         * @return boolean
         */
        public function hasConsistent()
        {
            return isset($this->consistent);
        }

        /**
         * Clear "consistent" value
         */
        public function clearConsistent()
        {
            unset($this->consistent);
        }

        /**
         * Get "consistent" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getConsistent()
        {
            return \PhpOption\Option::fromValue($this->consistent);
        }

        /**
         * Set "consistent" value
         *
         * @param boolean $value
         */
        public function setConsistent($value)
        {
            return $this->consistent = $value;
        }
    }
}
