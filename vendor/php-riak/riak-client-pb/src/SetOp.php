<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class SetOp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.SetOp');

            // repeated bytes adds = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "adds";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // repeated bytes removes = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "removes";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "adds" has a value
         *
         * @return boolean
         */
        public function hasAdds()
        {
            return isset($this->adds);
        }

        /**
         * Clear "adds" value
         */
        public function clearAdds()
        {
            unset($this->adds);
        }

        /**
         * Get "adds" value
         *
         * @return \PhpOption\Option of type string[]
         */
        public function getAdds($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->adds)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->adds[$idx]);
        }

        /**
         * Get "adds" list of values
         *
         * @return string[]
         */
        public function getAddsList()
        {
            return $this->adds;
        }

        /**
         * Set "adds" value
         *
         * @param string[] $value
         */
        public function setAdds($value)
        {
            return $this->adds = $value;
        }

        /**
         * Add a new element to "adds"
         *
         * @param string $value
         */
        public function addAdds($value)
        {
            $this->adds[] = $value;
        }

        /**
         * Check if "removes" has a value
         *
         * @return boolean
         */
        public function hasRemoves()
        {
            return isset($this->removes);
        }

        /**
         * Clear "removes" value
         */
        public function clearRemoves()
        {
            unset($this->removes);
        }

        /**
         * Get "removes" value
         *
         * @return \PhpOption\Option of type string[]
         */
        public function getRemoves($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->removes)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->removes[$idx]);
        }

        /**
         * Get "removes" list of values
         *
         * @return string[]
         */
        public function getRemovesList()
        {
            return $this->removes;
        }

        /**
         * Set "removes" value
         *
         * @param string[] $value
         */
        public function setRemoves($value)
        {
            return $this->removes = $value;
        }

        /**
         * Add a new element to "removes"
         *
         * @param string $value
         */
        public function addRemoves($value)
        {
            $this->removes[] = $value;
        }
    }
}
