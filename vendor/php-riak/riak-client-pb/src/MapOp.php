<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class MapOp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.MapOp');

            // repeated message removes = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "removes";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\MapField';

            $descriptor->addField($f);

            // repeated message updates = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "updates";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\MapUpdate';

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "removes" has a value
         *
         * @return boolean
         */
        public function hasRemoves()
        {
            return isset($this->removes);
        }

        /**
         * Clear "removes" value
         */
        public function clearRemoves()
        {
            unset($this->removes);
        }

        /**
         * Get "removes" value
         *
         * @return \PhpOption\Option of type MapField[]
         */
        public function getRemoves($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->removes)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->removes[$idx]);
        }

        /**
         * Get "removes" list of values
         *
         * @return MapField[]
         */
        public function getRemovesList()
        {
            return $this->removes;
        }

        /**
         * Set "removes" value
         *
         * @param MapField[] $value
         */
        public function setRemoves($value)
        {
            return $this->removes = $value;
        }

        /**
         * Add a new element to "removes"
         *
         * @param MapField $value
         */
        public function addRemoves($value)
        {
            $this->removes[] = $value;
        }

        /**
         * Check if "updates" has a value
         *
         * @return boolean
         */
        public function hasUpdates()
        {
            return isset($this->updates);
        }

        /**
         * Clear "updates" value
         */
        public function clearUpdates()
        {
            unset($this->updates);
        }

        /**
         * Get "updates" value
         *
         * @return \PhpOption\Option of type MapUpdate[]
         */
        public function getUpdates($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->updates)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->updates[$idx]);
        }

        /**
         * Get "updates" list of values
         *
         * @return MapUpdate[]
         */
        public function getUpdatesList()
        {
            return $this->updates;
        }

        /**
         * Set "updates" value
         *
         * @param MapUpdate[] $value
         */
        public function setUpdates($value)
        {
            return $this->updates = $value;
        }

        /**
         * Add a new element to "updates"
         *
         * @param MapUpdate $value
         */
        public function addUpdates($value)
        {
            $this->updates[] = $value;
        }
    }
}
