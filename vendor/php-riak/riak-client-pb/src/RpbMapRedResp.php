<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbMapRedResp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbMapRedResp');

            // optional uint32 phase = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "phase";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes response = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "response";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool done = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "done";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "phase" has a value
         *
         * @return boolean
         */
        public function hasPhase()
        {
            return isset($this->phase);
        }

        /**
         * Clear "phase" value
         */
        public function clearPhase()
        {
            unset($this->phase);
        }

        /**
         * Get "phase" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPhase()
        {
            return \PhpOption\Option::fromValue($this->phase);
        }

        /**
         * Set "phase" value
         *
         * @param int $value
         */
        public function setPhase($value)
        {
            return $this->phase = $value;
        }

        /**
         * Check if "response" has a value
         *
         * @return boolean
         */
        public function hasResponse()
        {
            return isset($this->response);
        }

        /**
         * Clear "response" value
         */
        public function clearResponse()
        {
            unset($this->response);
        }

        /**
         * Get "response" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getResponse()
        {
            return \PhpOption\Option::fromValue($this->response);
        }

        /**
         * Set "response" value
         *
         * @param string $value
         */
        public function setResponse($value)
        {
            return $this->response = $value;
        }

        /**
         * Check if "done" has a value
         *
         * @return boolean
         */
        public function hasDone()
        {
            return isset($this->done);
        }

        /**
         * Clear "done" value
         */
        public function clearDone()
        {
            unset($this->done);
        }

        /**
         * Get "done" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getDone()
        {
            return \PhpOption\Option::fromValue($this->done);
        }

        /**
         * Set "done" value
         *
         * @param boolean $value
         */
        public function setDone($value)
        {
            return $this->done = $value;
        }
    }
}
