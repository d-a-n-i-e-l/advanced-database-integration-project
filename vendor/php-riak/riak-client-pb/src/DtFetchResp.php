<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class DtFetchResp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.DtFetchResp');

            // optional bytes context = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "context";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required enum type = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;

            $f->reference = '\Riak\Client\ProtoBuf\DtFetchResp\DataType';

            $descriptor->addField($f);

            // optional message value = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\DtValue';

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "context" has a value
         *
         * @return boolean
         */
        public function hasContext()
        {
            return isset($this->context);
        }

        /**
         * Clear "context" value
         */
        public function clearContext()
        {
            unset($this->context);
        }

        /**
         * Get "context" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContext()
        {
            return \PhpOption\Option::fromValue($this->context);
        }

        /**
         * Set "context" value
         *
         * @param string $value
         */
        public function setContext($value)
        {
            return $this->context = $value;
        }

        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        /**
         * Get "type" value
         * @return int - DtFetchResp\DataType                  *
         *
         */
        public function getType()
        {
            return $this->type;
        }

        /**
         * Set "type" value
         *
         * @param int - DtFetchResp\DataType $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        /**
         * Get "value" value
         * @return \PhpOption\Option of type (DtValue)
         *
         *
         */
        public function getValue()
        {
            return \PhpOption\Option::fromValue($this->value);
        }

        /**
         * Set "value" value
         *
         * @param DtValue $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }
    }
}
