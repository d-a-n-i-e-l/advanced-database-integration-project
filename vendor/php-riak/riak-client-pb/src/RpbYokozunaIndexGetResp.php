<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbYokozunaIndexGetResp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbYokozunaIndexGetResp');

            // repeated message index = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "index";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbYokozunaIndex';

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "index" has a value
         *
         * @return boolean
         */
        public function hasIndex()
        {
            return isset($this->index);
        }

        /**
         * Clear "index" value
         */
        public function clearIndex()
        {
            unset($this->index);
        }

        /**
         * Get "index" value
         *
         * @return \PhpOption\Option of type RpbYokozunaIndex[]
         */
        public function getIndex($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->index)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->index[$idx]);
        }

        /**
         * Get "index" list of values
         *
         * @return RpbYokozunaIndex[]
         */
        public function getIndexList()
        {
            return $this->index;
        }

        /**
         * Set "index" value
         *
         * @param RpbYokozunaIndex[] $value
         */
        public function setIndex($value)
        {
            return $this->index = $value;
        }

        /**
         * Add a new element to "index"
         *
         * @param RpbYokozunaIndex $value
         */
        public function addIndex($value)
        {
            $this->index[] = $value;
        }
    }
}
