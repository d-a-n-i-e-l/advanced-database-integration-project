<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbContent extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbContent');

            // required bytes value = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "value";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes content_type = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "content_type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes charset = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "charset";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes content_encoding = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "content_encoding";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes vtag = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "vtag";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // repeated message links = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "links";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbLink';

            $descriptor->addField($f);

            // optional uint32 last_mod = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "last_mod";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 last_mod_usecs = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "last_mod_usecs";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // repeated message usermeta = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "usermeta";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbPair';

            $descriptor->addField($f);

            // repeated message indexes = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "indexes";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbPair';

            $descriptor->addField($f);

            // optional bool deleted = 11
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "deleted";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "value" has a value
         *
         * @return boolean
         */
        public function hasValue()
        {
            return isset($this->value);
        }

        /**
         * Clear "value" value
         */
        public function clearValue()
        {
            unset($this->value);
        }

        /**
         * Get "value" value
         * @return string                  *
         *
         */
        public function getValue()
        {
            return $this->value;
        }

        /**
         * Set "value" value
         *
         * @param string $value
         */
        public function setValue($value)
        {
            return $this->value = $value;
        }

        /**
         * Check if "content_type" has a value
         *
         * @return boolean
         */
        public function hasContentType()
        {
            return isset($this->content_type);
        }

        /**
         * Clear "content_type" value
         */
        public function clearContentType()
        {
            unset($this->content_type);
        }

        /**
         * Get "content_type" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContentType()
        {
            return \PhpOption\Option::fromValue($this->content_type);
        }

        /**
         * Set "content_type" value
         *
         * @param string $value
         */
        public function setContentType($value)
        {
            return $this->content_type = $value;
        }

        /**
         * Check if "charset" has a value
         *
         * @return boolean
         */
        public function hasCharset()
        {
            return isset($this->charset);
        }

        /**
         * Clear "charset" value
         */
        public function clearCharset()
        {
            unset($this->charset);
        }

        /**
         * Get "charset" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getCharset()
        {
            return \PhpOption\Option::fromValue($this->charset);
        }

        /**
         * Set "charset" value
         *
         * @param string $value
         */
        public function setCharset($value)
        {
            return $this->charset = $value;
        }

        /**
         * Check if "content_encoding" has a value
         *
         * @return boolean
         */
        public function hasContentEncoding()
        {
            return isset($this->content_encoding);
        }

        /**
         * Clear "content_encoding" value
         */
        public function clearContentEncoding()
        {
            unset($this->content_encoding);
        }

        /**
         * Get "content_encoding" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContentEncoding()
        {
            return \PhpOption\Option::fromValue($this->content_encoding);
        }

        /**
         * Set "content_encoding" value
         *
         * @param string $value
         */
        public function setContentEncoding($value)
        {
            return $this->content_encoding = $value;
        }

        /**
         * Check if "vtag" has a value
         *
         * @return boolean
         */
        public function hasVtag()
        {
            return isset($this->vtag);
        }

        /**
         * Clear "vtag" value
         */
        public function clearVtag()
        {
            unset($this->vtag);
        }

        /**
         * Get "vtag" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getVtag()
        {
            return \PhpOption\Option::fromValue($this->vtag);
        }

        /**
         * Set "vtag" value
         *
         * @param string $value
         */
        public function setVtag($value)
        {
            return $this->vtag = $value;
        }

        /**
         * Check if "links" has a value
         *
         * @return boolean
         */
        public function hasLinks()
        {
            return isset($this->links);
        }

        /**
         * Clear "links" value
         */
        public function clearLinks()
        {
            unset($this->links);
        }

        /**
         * Get "links" value
         *
         * @return \PhpOption\Option of type RpbLink[]
         */
        public function getLinks($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->links)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->links[$idx]);
        }

        /**
         * Get "links" list of values
         *
         * @return RpbLink[]
         */
        public function getLinksList()
        {
            return $this->links;
        }

        /**
         * Set "links" value
         *
         * @param RpbLink[] $value
         */
        public function setLinks($value)
        {
            return $this->links = $value;
        }

        /**
         * Add a new element to "links"
         *
         * @param RpbLink $value
         */
        public function addLinks($value)
        {
            $this->links[] = $value;
        }

        /**
         * Check if "last_mod" has a value
         *
         * @return boolean
         */
        public function hasLastMod()
        {
            return isset($this->last_mod);
        }

        /**
         * Clear "last_mod" value
         */
        public function clearLastMod()
        {
            unset($this->last_mod);
        }

        /**
         * Get "last_mod" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getLastMod()
        {
            return \PhpOption\Option::fromValue($this->last_mod);
        }

        /**
         * Set "last_mod" value
         *
         * @param int $value
         */
        public function setLastMod($value)
        {
            return $this->last_mod = $value;
        }

        /**
         * Check if "last_mod_usecs" has a value
         *
         * @return boolean
         */
        public function hasLastModUsecs()
        {
            return isset($this->last_mod_usecs);
        }

        /**
         * Clear "last_mod_usecs" value
         */
        public function clearLastModUsecs()
        {
            unset($this->last_mod_usecs);
        }

        /**
         * Get "last_mod_usecs" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getLastModUsecs()
        {
            return \PhpOption\Option::fromValue($this->last_mod_usecs);
        }

        /**
         * Set "last_mod_usecs" value
         *
         * @param int $value
         */
        public function setLastModUsecs($value)
        {
            return $this->last_mod_usecs = $value;
        }

        /**
         * Check if "usermeta" has a value
         *
         * @return boolean
         */
        public function hasUsermeta()
        {
            return isset($this->usermeta);
        }

        /**
         * Clear "usermeta" value
         */
        public function clearUsermeta()
        {
            unset($this->usermeta);
        }

        /**
         * Get "usermeta" value
         *
         * @return \PhpOption\Option of type RpbPair[]
         */
        public function getUsermeta($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->usermeta)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->usermeta[$idx]);
        }

        /**
         * Get "usermeta" list of values
         *
         * @return RpbPair[]
         */
        public function getUsermetaList()
        {
            return $this->usermeta;
        }

        /**
         * Set "usermeta" value
         *
         * @param RpbPair[] $value
         */
        public function setUsermeta($value)
        {
            return $this->usermeta = $value;
        }

        /**
         * Add a new element to "usermeta"
         *
         * @param RpbPair $value
         */
        public function addUsermeta($value)
        {
            $this->usermeta[] = $value;
        }

        /**
         * Check if "indexes" has a value
         *
         * @return boolean
         */
        public function hasIndexes()
        {
            return isset($this->indexes);
        }

        /**
         * Clear "indexes" value
         */
        public function clearIndexes()
        {
            unset($this->indexes);
        }

        /**
         * Get "indexes" value
         *
         * @return \PhpOption\Option of type RpbPair[]
         */
        public function getIndexes($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->indexes)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->indexes[$idx]);
        }

        /**
         * Get "indexes" list of values
         *
         * @return RpbPair[]
         */
        public function getIndexesList()
        {
            return $this->indexes;
        }

        /**
         * Set "indexes" value
         *
         * @param RpbPair[] $value
         */
        public function setIndexes($value)
        {
            return $this->indexes = $value;
        }

        /**
         * Add a new element to "indexes"
         *
         * @param RpbPair $value
         */
        public function addIndexes($value)
        {
            $this->indexes[] = $value;
        }

        /**
         * Check if "deleted" has a value
         *
         * @return boolean
         */
        public function hasDeleted()
        {
            return isset($this->deleted);
        }

        /**
         * Clear "deleted" value
         */
        public function clearDeleted()
        {
            unset($this->deleted);
        }

        /**
         * Get "deleted" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getDeleted()
        {
            return \PhpOption\Option::fromValue($this->deleted);
        }

        /**
         * Set "deleted" value
         *
         * @param boolean $value
         */
        public function setDeleted($value)
        {
            return $this->deleted = $value;
        }
    }
}
