<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbIndexReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbIndexReq');

            // required bytes bucket = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required bytes index = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "index";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required enum qtype = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "qtype";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_ENUM;

            $f->reference = '\Riak\Client\ProtoBuf\RpbIndexReq\IndexQueryType';

            $descriptor->addField($f);

            // optional bytes key = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes range_min = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "range_min";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes range_max = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "range_max";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool return_terms = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "return_terms";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool stream = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "stream";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional uint32 max_results = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "max_results";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes continuation = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "continuation";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional uint32 timeout = 11
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "timeout";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes type = 12
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 12;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes term_regex = 13
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 13;
            $f->name   = "term_regex";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool pagination_sort = 14
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 14;
            $f->name   = "pagination_sort";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        /**
         * Get "bucket" value
         * @return string                  *
         *
         */
        public function getBucket()
        {
            return $this->bucket;
        }

        /**
         * Set "bucket" value
         *
         * @param string $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Check if "index" has a value
         *
         * @return boolean
         */
        public function hasIndex()
        {
            return isset($this->index);
        }

        /**
         * Clear "index" value
         */
        public function clearIndex()
        {
            unset($this->index);
        }

        /**
         * Get "index" value
         * @return string                  *
         *
         */
        public function getIndex()
        {
            return $this->index;
        }

        /**
         * Set "index" value
         *
         * @param string $value
         */
        public function setIndex($value)
        {
            return $this->index = $value;
        }

        /**
         * Check if "qtype" has a value
         *
         * @return boolean
         */
        public function hasQtype()
        {
            return isset($this->qtype);
        }

        /**
         * Clear "qtype" value
         */
        public function clearQtype()
        {
            unset($this->qtype);
        }

        /**
         * Get "qtype" value
         * @return int - RpbIndexReq\IndexQueryType                  *
         *
         */
        public function getQtype()
        {
            return $this->qtype;
        }

        /**
         * Set "qtype" value
         *
         * @param int - RpbIndexReq\IndexQueryType $value
         */
        public function setQtype($value)
        {
            return $this->qtype = $value;
        }

        /**
         * Check if "key" has a value
         *
         * @return boolean
         */
        public function hasKey()
        {
            return isset($this->key);
        }

        /**
         * Clear "key" value
         */
        public function clearKey()
        {
            unset($this->key);
        }

        /**
         * Get "key" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getKey()
        {
            return \PhpOption\Option::fromValue($this->key);
        }

        /**
         * Set "key" value
         *
         * @param string $value
         */
        public function setKey($value)
        {
            return $this->key = $value;
        }

        /**
         * Check if "range_min" has a value
         *
         * @return boolean
         */
        public function hasRangeMin()
        {
            return isset($this->range_min);
        }

        /**
         * Clear "range_min" value
         */
        public function clearRangeMin()
        {
            unset($this->range_min);
        }

        /**
         * Get "range_min" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getRangeMin()
        {
            return \PhpOption\Option::fromValue($this->range_min);
        }

        /**
         * Set "range_min" value
         *
         * @param string $value
         */
        public function setRangeMin($value)
        {
            return $this->range_min = $value;
        }

        /**
         * Check if "range_max" has a value
         *
         * @return boolean
         */
        public function hasRangeMax()
        {
            return isset($this->range_max);
        }

        /**
         * Clear "range_max" value
         */
        public function clearRangeMax()
        {
            unset($this->range_max);
        }

        /**
         * Get "range_max" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getRangeMax()
        {
            return \PhpOption\Option::fromValue($this->range_max);
        }

        /**
         * Set "range_max" value
         *
         * @param string $value
         */
        public function setRangeMax($value)
        {
            return $this->range_max = $value;
        }

        /**
         * Check if "return_terms" has a value
         *
         * @return boolean
         */
        public function hasReturnTerms()
        {
            return isset($this->return_terms);
        }

        /**
         * Clear "return_terms" value
         */
        public function clearReturnTerms()
        {
            unset($this->return_terms);
        }

        /**
         * Get "return_terms" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getReturnTerms()
        {
            return \PhpOption\Option::fromValue($this->return_terms);
        }

        /**
         * Set "return_terms" value
         *
         * @param boolean $value
         */
        public function setReturnTerms($value)
        {
            return $this->return_terms = $value;
        }

        /**
         * Check if "stream" has a value
         *
         * @return boolean
         */
        public function hasStream()
        {
            return isset($this->stream);
        }

        /**
         * Clear "stream" value
         */
        public function clearStream()
        {
            unset($this->stream);
        }

        /**
         * Get "stream" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getStream()
        {
            return \PhpOption\Option::fromValue($this->stream);
        }

        /**
         * Set "stream" value
         *
         * @param boolean $value
         */
        public function setStream($value)
        {
            return $this->stream = $value;
        }

        /**
         * Check if "max_results" has a value
         *
         * @return boolean
         */
        public function hasMaxResults()
        {
            return isset($this->max_results);
        }

        /**
         * Clear "max_results" value
         */
        public function clearMaxResults()
        {
            unset($this->max_results);
        }

        /**
         * Get "max_results" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getMaxResults()
        {
            return \PhpOption\Option::fromValue($this->max_results);
        }

        /**
         * Set "max_results" value
         *
         * @param int $value
         */
        public function setMaxResults($value)
        {
            return $this->max_results = $value;
        }

        /**
         * Check if "continuation" has a value
         *
         * @return boolean
         */
        public function hasContinuation()
        {
            return isset($this->continuation);
        }

        /**
         * Clear "continuation" value
         */
        public function clearContinuation()
        {
            unset($this->continuation);
        }

        /**
         * Get "continuation" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getContinuation()
        {
            return \PhpOption\Option::fromValue($this->continuation);
        }

        /**
         * Set "continuation" value
         *
         * @param string $value
         */
        public function setContinuation($value)
        {
            return $this->continuation = $value;
        }

        /**
         * Check if "timeout" has a value
         *
         * @return boolean
         */
        public function hasTimeout()
        {
            return isset($this->timeout);
        }

        /**
         * Clear "timeout" value
         */
        public function clearTimeout()
        {
            unset($this->timeout);
        }

        /**
         * Get "timeout" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getTimeout()
        {
            return \PhpOption\Option::fromValue($this->timeout);
        }

        /**
         * Set "timeout" value
         *
         * @param int $value
         */
        public function setTimeout($value)
        {
            return $this->timeout = $value;
        }

        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        /**
         * Get "type" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getType()
        {
            return \PhpOption\Option::fromValue($this->type);
        }

        /**
         * Set "type" value
         *
         * @param string $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }

        /**
         * Check if "term_regex" has a value
         *
         * @return boolean
         */
        public function hasTermRegex()
        {
            return isset($this->term_regex);
        }

        /**
         * Clear "term_regex" value
         */
        public function clearTermRegex()
        {
            unset($this->term_regex);
        }

        /**
         * Get "term_regex" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getTermRegex()
        {
            return \PhpOption\Option::fromValue($this->term_regex);
        }

        /**
         * Set "term_regex" value
         *
         * @param string $value
         */
        public function setTermRegex($value)
        {
            return $this->term_regex = $value;
        }

        /**
         * Check if "pagination_sort" has a value
         *
         * @return boolean
         */
        public function hasPaginationSort()
        {
            return isset($this->pagination_sort);
        }

        /**
         * Clear "pagination_sort" value
         */
        public function clearPaginationSort()
        {
            unset($this->pagination_sort);
        }

        /**
         * Get "pagination_sort" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getPaginationSort()
        {
            return \PhpOption\Option::fromValue($this->pagination_sort);
        }

        /**
         * Set "pagination_sort" value
         *
         * @param boolean $value
         */
        public function setPaginationSort($value)
        {
            return $this->pagination_sort = $value;
        }
    }
}
