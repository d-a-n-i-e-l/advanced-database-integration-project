<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbSearchQueryReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSearchQueryReq');

            // required bytes q = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "q";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required bytes index = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "index";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional uint32 rows = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "rows";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 start = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "start";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes sort = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "sort";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes filter = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "filter";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes df = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "df";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes op = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "op";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // repeated bytes fl = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "fl";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes presort = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "presort";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "q" has a value
         *
         * @return boolean
         */
        public function hasQ()
        {
            return isset($this->q);
        }

        /**
         * Clear "q" value
         */
        public function clearQ()
        {
            unset($this->q);
        }

        /**
         * Get "q" value
         * @return string                  *
         *
         */
        public function getQ()
        {
            return $this->q;
        }

        /**
         * Set "q" value
         *
         * @param string $value
         */
        public function setQ($value)
        {
            return $this->q = $value;
        }

        /**
         * Check if "index" has a value
         *
         * @return boolean
         */
        public function hasIndex()
        {
            return isset($this->index);
        }

        /**
         * Clear "index" value
         */
        public function clearIndex()
        {
            unset($this->index);
        }

        /**
         * Get "index" value
         * @return string                  *
         *
         */
        public function getIndex()
        {
            return $this->index;
        }

        /**
         * Set "index" value
         *
         * @param string $value
         */
        public function setIndex($value)
        {
            return $this->index = $value;
        }

        /**
         * Check if "rows" has a value
         *
         * @return boolean
         */
        public function hasRows()
        {
            return isset($this->rows);
        }

        /**
         * Clear "rows" value
         */
        public function clearRows()
        {
            unset($this->rows);
        }

        /**
         * Get "rows" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getRows()
        {
            return \PhpOption\Option::fromValue($this->rows);
        }

        /**
         * Set "rows" value
         *
         * @param int $value
         */
        public function setRows($value)
        {
            return $this->rows = $value;
        }

        /**
         * Check if "start" has a value
         *
         * @return boolean
         */
        public function hasStart()
        {
            return isset($this->start);
        }

        /**
         * Clear "start" value
         */
        public function clearStart()
        {
            unset($this->start);
        }

        /**
         * Get "start" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getStart()
        {
            return \PhpOption\Option::fromValue($this->start);
        }

        /**
         * Set "start" value
         *
         * @param int $value
         */
        public function setStart($value)
        {
            return $this->start = $value;
        }

        /**
         * Check if "sort" has a value
         *
         * @return boolean
         */
        public function hasSort()
        {
            return isset($this->sort);
        }

        /**
         * Clear "sort" value
         */
        public function clearSort()
        {
            unset($this->sort);
        }

        /**
         * Get "sort" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getSort()
        {
            return \PhpOption\Option::fromValue($this->sort);
        }

        /**
         * Set "sort" value
         *
         * @param string $value
         */
        public function setSort($value)
        {
            return $this->sort = $value;
        }

        /**
         * Check if "filter" has a value
         *
         * @return boolean
         */
        public function hasFilter()
        {
            return isset($this->filter);
        }

        /**
         * Clear "filter" value
         */
        public function clearFilter()
        {
            unset($this->filter);
        }

        /**
         * Get "filter" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getFilter()
        {
            return \PhpOption\Option::fromValue($this->filter);
        }

        /**
         * Set "filter" value
         *
         * @param string $value
         */
        public function setFilter($value)
        {
            return $this->filter = $value;
        }

        /**
         * Check if "df" has a value
         *
         * @return boolean
         */
        public function hasDf()
        {
            return isset($this->df);
        }

        /**
         * Clear "df" value
         */
        public function clearDf()
        {
            unset($this->df);
        }

        /**
         * Get "df" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getDf()
        {
            return \PhpOption\Option::fromValue($this->df);
        }

        /**
         * Set "df" value
         *
         * @param string $value
         */
        public function setDf($value)
        {
            return $this->df = $value;
        }

        /**
         * Check if "op" has a value
         *
         * @return boolean
         */
        public function hasOp()
        {
            return isset($this->op);
        }

        /**
         * Clear "op" value
         */
        public function clearOp()
        {
            unset($this->op);
        }

        /**
         * Get "op" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getOp()
        {
            return \PhpOption\Option::fromValue($this->op);
        }

        /**
         * Set "op" value
         *
         * @param string $value
         */
        public function setOp($value)
        {
            return $this->op = $value;
        }

        /**
         * Check if "fl" has a value
         *
         * @return boolean
         */
        public function hasFl()
        {
            return isset($this->fl);
        }

        /**
         * Clear "fl" value
         */
        public function clearFl()
        {
            unset($this->fl);
        }

        /**
         * Get "fl" value
         *
         * @return \PhpOption\Option of type string[]
         */
        public function getFl($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->fl)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->fl[$idx]);
        }

        /**
         * Get "fl" list of values
         *
         * @return string[]
         */
        public function getFlList()
        {
            return $this->fl;
        }

        /**
         * Set "fl" value
         *
         * @param string[] $value
         */
        public function setFl($value)
        {
            return $this->fl = $value;
        }

        /**
         * Add a new element to "fl"
         *
         * @param string $value
         */
        public function addFl($value)
        {
            $this->fl[] = $value;
        }

        /**
         * Check if "presort" has a value
         *
         * @return boolean
         */
        public function hasPresort()
        {
            return isset($this->presort);
        }

        /**
         * Clear "presort" value
         */
        public function clearPresort()
        {
            unset($this->presort);
        }

        /**
         * Get "presort" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getPresort()
        {
            return \PhpOption\Option::fromValue($this->presort);
        }

        /**
         * Set "presort" value
         *
         * @param string $value
         */
        public function setPresort($value)
        {
            return $this->presort = $value;
        }
    }
}
