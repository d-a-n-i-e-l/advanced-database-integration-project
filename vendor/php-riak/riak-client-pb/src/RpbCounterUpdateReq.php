<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbCounterUpdateReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbCounterUpdateReq');

            // required bytes bucket = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required bytes key = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required sint64 amount = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "amount";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_SINT64;

            $descriptor->addField($f);

            // optional uint32 w = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "w";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 dw = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "dw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 pw = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "pw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool returnvalue = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "returnvalue";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        /**
         * Get "bucket" value
         * @return string                  *
         *
         */
        public function getBucket()
        {
            return $this->bucket;
        }

        /**
         * Set "bucket" value
         *
         * @param string $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Check if "key" has a value
         *
         * @return boolean
         */
        public function hasKey()
        {
            return isset($this->key);
        }

        /**
         * Clear "key" value
         */
        public function clearKey()
        {
            unset($this->key);
        }

        /**
         * Get "key" value
         * @return string                  *
         *
         */
        public function getKey()
        {
            return $this->key;
        }

        /**
         * Set "key" value
         *
         * @param string $value
         */
        public function setKey($value)
        {
            return $this->key = $value;
        }

        /**
         * Check if "amount" has a value
         *
         * @return boolean
         */
        public function hasAmount()
        {
            return isset($this->amount);
        }

        /**
         * Clear "amount" value
         */
        public function clearAmount()
        {
            unset($this->amount);
        }

        /**
         * Get "amount" value
         * @return int                  *
         *
         */
        public function getAmount()
        {
            return $this->amount;
        }

        /**
         * Set "amount" value
         *
         * @param int $value
         */
        public function setAmount($value)
        {
            return $this->amount = $value;
        }

        /**
         * Check if "w" has a value
         *
         * @return boolean
         */
        public function hasW()
        {
            return isset($this->w);
        }

        /**
         * Clear "w" value
         */
        public function clearW()
        {
            unset($this->w);
        }

        /**
         * Get "w" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getW()
        {
            return \PhpOption\Option::fromValue($this->w);
        }

        /**
         * Set "w" value
         *
         * @param int $value
         */
        public function setW($value)
        {
            return $this->w = $value;
        }

        /**
         * Check if "dw" has a value
         *
         * @return boolean
         */
        public function hasDw()
        {
            return isset($this->dw);
        }

        /**
         * Clear "dw" value
         */
        public function clearDw()
        {
            unset($this->dw);
        }

        /**
         * Get "dw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getDw()
        {
            return \PhpOption\Option::fromValue($this->dw);
        }

        /**
         * Set "dw" value
         *
         * @param int $value
         */
        public function setDw($value)
        {
            return $this->dw = $value;
        }

        /**
         * Check if "pw" has a value
         *
         * @return boolean
         */
        public function hasPw()
        {
            return isset($this->pw);
        }

        /**
         * Clear "pw" value
         */
        public function clearPw()
        {
            unset($this->pw);
        }

        /**
         * Get "pw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPw()
        {
            return \PhpOption\Option::fromValue($this->pw);
        }

        /**
         * Set "pw" value
         *
         * @param int $value
         */
        public function setPw($value)
        {
            return $this->pw = $value;
        }

        /**
         * Check if "returnvalue" has a value
         *
         * @return boolean
         */
        public function hasReturnvalue()
        {
            return isset($this->returnvalue);
        }

        /**
         * Clear "returnvalue" value
         */
        public function clearReturnvalue()
        {
            unset($this->returnvalue);
        }

        /**
         * Get "returnvalue" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getReturnvalue()
        {
            return \PhpOption\Option::fromValue($this->returnvalue);
        }

        /**
         * Set "returnvalue" value
         *
         * @param boolean $value
         */
        public function setReturnvalue($value)
        {
            return $this->returnvalue = $value;
        }
    }
}
