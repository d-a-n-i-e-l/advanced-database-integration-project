<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbListBucketsResp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbListBucketsResp');

            // repeated bytes buckets = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "buckets";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bool done = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "done";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "buckets" has a value
         *
         * @return boolean
         */
        public function hasBuckets()
        {
            return isset($this->buckets);
        }

        /**
         * Clear "buckets" value
         */
        public function clearBuckets()
        {
            unset($this->buckets);
        }

        /**
         * Get "buckets" value
         *
         * @return \PhpOption\Option of type string[]
         */
        public function getBuckets($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->buckets)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->buckets[$idx]);
        }

        /**
         * Get "buckets" list of values
         *
         * @return string[]
         */
        public function getBucketsList()
        {
            return $this->buckets;
        }

        /**
         * Set "buckets" value
         *
         * @param string[] $value
         */
        public function setBuckets($value)
        {
            return $this->buckets = $value;
        }

        /**
         * Add a new element to "buckets"
         *
         * @param string $value
         */
        public function addBuckets($value)
        {
            $this->buckets[] = $value;
        }

        /**
         * Check if "done" has a value
         *
         * @return boolean
         */
        public function hasDone()
        {
            return isset($this->done);
        }

        /**
         * Clear "done" value
         */
        public function clearDone()
        {
            unset($this->done);
        }

        /**
         * Get "done" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getDone()
        {
            return \PhpOption\Option::fromValue($this->done);
        }

        /**
         * Set "done" value
         *
         * @param boolean $value
         */
        public function setDone($value)
        {
            return $this->done = $value;
        }
    }
}
