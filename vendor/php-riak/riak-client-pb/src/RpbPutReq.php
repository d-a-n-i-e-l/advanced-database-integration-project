<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbPutReq extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbPutReq');

            // required bytes bucket = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "bucket";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes key = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "key";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // optional bytes vclock = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "vclock";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            // required message content = 4
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 4;
            $f->name   = "content";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REQUIRED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbContent';

            $descriptor->addField($f);

            // optional uint32 w = 5
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 5;
            $f->name   = "w";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional uint32 dw = 6
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 6;
            $f->name   = "dw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool return_body = 7
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 7;
            $f->name   = "return_body";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional uint32 pw = 8
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 8;
            $f->name   = "pw";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool if_not_modified = 9
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 9;
            $f->name   = "if_not_modified";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool if_none_match = 10
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 10;
            $f->name   = "if_none_match";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool return_head = 11
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 11;
            $f->name   = "return_head";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional uint32 timeout = 12
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 12;
            $f->name   = "timeout";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bool asis = 13
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 13;
            $f->name   = "asis";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional bool sloppy_quorum = 14
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 14;
            $f->name   = "sloppy_quorum";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BOOL;

            $descriptor->addField($f);

            // optional uint32 n_val = 15
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 15;
            $f->name   = "n_val";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            // optional bytes type = 16
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 16;
            $f->name   = "type";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_BYTES;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "bucket" has a value
         *
         * @return boolean
         */
        public function hasBucket()
        {
            return isset($this->bucket);
        }

        /**
         * Clear "bucket" value
         */
        public function clearBucket()
        {
            unset($this->bucket);
        }

        /**
         * Get "bucket" value
         * @return string                  *
         *
         */
        public function getBucket()
        {
            return $this->bucket;
        }

        /**
         * Set "bucket" value
         *
         * @param string $value
         */
        public function setBucket($value)
        {
            return $this->bucket = $value;
        }

        /**
         * Check if "key" has a value
         *
         * @return boolean
         */
        public function hasKey()
        {
            return isset($this->key);
        }

        /**
         * Clear "key" value
         */
        public function clearKey()
        {
            unset($this->key);
        }

        /**
         * Get "key" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getKey()
        {
            return \PhpOption\Option::fromValue($this->key);
        }

        /**
         * Set "key" value
         *
         * @param string $value
         */
        public function setKey($value)
        {
            return $this->key = $value;
        }

        /**
         * Check if "vclock" has a value
         *
         * @return boolean
         */
        public function hasVclock()
        {
            return isset($this->vclock);
        }

        /**
         * Clear "vclock" value
         */
        public function clearVclock()
        {
            unset($this->vclock);
        }

        /**
         * Get "vclock" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getVclock()
        {
            return \PhpOption\Option::fromValue($this->vclock);
        }

        /**
         * Set "vclock" value
         *
         * @param string $value
         */
        public function setVclock($value)
        {
            return $this->vclock = $value;
        }

        /**
         * Check if "content" has a value
         *
         * @return boolean
         */
        public function hasContent()
        {
            return isset($this->content);
        }

        /**
         * Clear "content" value
         */
        public function clearContent()
        {
            unset($this->content);
        }

        /**
         * Get "content" value
         * @return RpbContent                  *
         *
         */
        public function getContent()
        {
            return $this->content;
        }

        /**
         * Set "content" value
         *
         * @param RpbContent $value
         */
        public function setContent($value)
        {
            return $this->content = $value;
        }

        /**
         * Check if "w" has a value
         *
         * @return boolean
         */
        public function hasW()
        {
            return isset($this->w);
        }

        /**
         * Clear "w" value
         */
        public function clearW()
        {
            unset($this->w);
        }

        /**
         * Get "w" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getW()
        {
            return \PhpOption\Option::fromValue($this->w);
        }

        /**
         * Set "w" value
         *
         * @param int $value
         */
        public function setW($value)
        {
            return $this->w = $value;
        }

        /**
         * Check if "dw" has a value
         *
         * @return boolean
         */
        public function hasDw()
        {
            return isset($this->dw);
        }

        /**
         * Clear "dw" value
         */
        public function clearDw()
        {
            unset($this->dw);
        }

        /**
         * Get "dw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getDw()
        {
            return \PhpOption\Option::fromValue($this->dw);
        }

        /**
         * Set "dw" value
         *
         * @param int $value
         */
        public function setDw($value)
        {
            return $this->dw = $value;
        }

        /**
         * Check if "return_body" has a value
         *
         * @return boolean
         */
        public function hasReturnBody()
        {
            return isset($this->return_body);
        }

        /**
         * Clear "return_body" value
         */
        public function clearReturnBody()
        {
            unset($this->return_body);
        }

        /**
         * Get "return_body" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getReturnBody()
        {
            return \PhpOption\Option::fromValue($this->return_body);
        }

        /**
         * Set "return_body" value
         *
         * @param boolean $value
         */
        public function setReturnBody($value)
        {
            return $this->return_body = $value;
        }

        /**
         * Check if "pw" has a value
         *
         * @return boolean
         */
        public function hasPw()
        {
            return isset($this->pw);
        }

        /**
         * Clear "pw" value
         */
        public function clearPw()
        {
            unset($this->pw);
        }

        /**
         * Get "pw" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getPw()
        {
            return \PhpOption\Option::fromValue($this->pw);
        }

        /**
         * Set "pw" value
         *
         * @param int $value
         */
        public function setPw($value)
        {
            return $this->pw = $value;
        }

        /**
         * Check if "if_not_modified" has a value
         *
         * @return boolean
         */
        public function hasIfNotModified()
        {
            return isset($this->if_not_modified);
        }

        /**
         * Clear "if_not_modified" value
         */
        public function clearIfNotModified()
        {
            unset($this->if_not_modified);
        }

        /**
         * Get "if_not_modified" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getIfNotModified()
        {
            return \PhpOption\Option::fromValue($this->if_not_modified);
        }

        /**
         * Set "if_not_modified" value
         *
         * @param boolean $value
         */
        public function setIfNotModified($value)
        {
            return $this->if_not_modified = $value;
        }

        /**
         * Check if "if_none_match" has a value
         *
         * @return boolean
         */
        public function hasIfNoneMatch()
        {
            return isset($this->if_none_match);
        }

        /**
         * Clear "if_none_match" value
         */
        public function clearIfNoneMatch()
        {
            unset($this->if_none_match);
        }

        /**
         * Get "if_none_match" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getIfNoneMatch()
        {
            return \PhpOption\Option::fromValue($this->if_none_match);
        }

        /**
         * Set "if_none_match" value
         *
         * @param boolean $value
         */
        public function setIfNoneMatch($value)
        {
            return $this->if_none_match = $value;
        }

        /**
         * Check if "return_head" has a value
         *
         * @return boolean
         */
        public function hasReturnHead()
        {
            return isset($this->return_head);
        }

        /**
         * Clear "return_head" value
         */
        public function clearReturnHead()
        {
            unset($this->return_head);
        }

        /**
         * Get "return_head" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getReturnHead()
        {
            return \PhpOption\Option::fromValue($this->return_head);
        }

        /**
         * Set "return_head" value
         *
         * @param boolean $value
         */
        public function setReturnHead($value)
        {
            return $this->return_head = $value;
        }

        /**
         * Check if "timeout" has a value
         *
         * @return boolean
         */
        public function hasTimeout()
        {
            return isset($this->timeout);
        }

        /**
         * Clear "timeout" value
         */
        public function clearTimeout()
        {
            unset($this->timeout);
        }

        /**
         * Get "timeout" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getTimeout()
        {
            return \PhpOption\Option::fromValue($this->timeout);
        }

        /**
         * Set "timeout" value
         *
         * @param int $value
         */
        public function setTimeout($value)
        {
            return $this->timeout = $value;
        }

        /**
         * Check if "asis" has a value
         *
         * @return boolean
         */
        public function hasAsis()
        {
            return isset($this->asis);
        }

        /**
         * Clear "asis" value
         */
        public function clearAsis()
        {
            unset($this->asis);
        }

        /**
         * Get "asis" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getAsis()
        {
            return \PhpOption\Option::fromValue($this->asis);
        }

        /**
         * Set "asis" value
         *
         * @param boolean $value
         */
        public function setAsis($value)
        {
            return $this->asis = $value;
        }

        /**
         * Check if "sloppy_quorum" has a value
         *
         * @return boolean
         */
        public function hasSloppyQuorum()
        {
            return isset($this->sloppy_quorum);
        }

        /**
         * Clear "sloppy_quorum" value
         */
        public function clearSloppyQuorum()
        {
            unset($this->sloppy_quorum);
        }

        /**
         * Get "sloppy_quorum" value
         * @return \PhpOption\Option of type (boolean)
         *
         *
         */
        public function getSloppyQuorum()
        {
            return \PhpOption\Option::fromValue($this->sloppy_quorum);
        }

        /**
         * Set "sloppy_quorum" value
         *
         * @param boolean $value
         */
        public function setSloppyQuorum($value)
        {
            return $this->sloppy_quorum = $value;
        }

        /**
         * Check if "n_val" has a value
         *
         * @return boolean
         */
        public function hasNVal()
        {
            return isset($this->n_val);
        }

        /**
         * Clear "n_val" value
         */
        public function clearNVal()
        {
            unset($this->n_val);
        }

        /**
         * Get "n_val" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getNVal()
        {
            return \PhpOption\Option::fromValue($this->n_val);
        }

        /**
         * Set "n_val" value
         *
         * @param int $value
         */
        public function setNVal($value)
        {
            return $this->n_val = $value;
        }

        /**
         * Check if "type" has a value
         *
         * @return boolean
         */
        public function hasType()
        {
            return isset($this->type);
        }

        /**
         * Clear "type" value
         */
        public function clearType()
        {
            unset($this->type);
        }

        /**
         * Get "type" value
         * @return \PhpOption\Option of type (string)
         *
         *
         */
        public function getType()
        {
            return \PhpOption\Option::fromValue($this->type);
        }

        /**
         * Set "type" value
         *
         * @param string $value
         */
        public function setType($value)
        {
            return $this->type = $value;
        }
    }
}
