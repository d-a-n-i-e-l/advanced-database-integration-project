<?php
// DO NOT EDIT! Generated by Protobuf-PHP protoc plugin @package_version@// Source: riak.proto
//   Date: 2015-01-16 03:40:25


namespace Riak\Client\ProtoBuf {

    class RpbSearchQueryResp extends \DrSlump\Protobuf\Message
    {
        /** @var \DrSlump\Protobuf\Descriptor */
        protected static $__descriptor;
        /** @var \Closure[] */
        protected static $__extensions = array();

        public static function descriptor()
        {
            $descriptor = new \DrSlump\Protobuf\Descriptor(__CLASS__, '.RpbSearchQueryResp');

            // repeated message docs = 1
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 1;
            $f->name   = "docs";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_REPEATED;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_MESSAGE;

            $f->reference = '\Riak\Client\ProtoBuf\RpbSearchDoc';

            $descriptor->addField($f);

            // optional float max_score = 2
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 2;
            $f->name   = "max_score";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_FLOAT;

            $descriptor->addField($f);

            // optional uint32 num_found = 3
            $f = new \DrSlump\Protobuf\Field();
            $f->number = 3;
            $f->name   = "num_found";
            $f->rule   = \DrSlump\Protobuf\Protobuf::RULE_OPTIONAL;
            $f->type   = \DrSlump\Protobuf\Protobuf::TYPE_UINT32;

            $descriptor->addField($f);

            foreach (self::$__extensions as $cb) {
                $descriptor->addField($cb(), true);
            }

            return $descriptor;
        }

        /**
         * Check if "docs" has a value
         *
         * @return boolean
         */
        public function hasDocs()
        {
            return isset($this->docs);
        }

        /**
         * Clear "docs" value
         */
        public function clearDocs()
        {
            unset($this->docs);
        }

        /**
         * Get "docs" value
         *
         * @return \PhpOption\Option of type RpbSearchDoc[]
         */
        public function getDocs($idx = null)
        {
            if (null == $idx || !array_key_exists($idx, $this->docs)) {
                return  \PhpOption\None::create();
            }

            return new \PhpOption\Some($this->docs[$idx]);
        }

        /**
         * Get "docs" list of values
         *
         * @return RpbSearchDoc[]
         */
        public function getDocsList()
        {
            return $this->docs;
        }

        /**
         * Set "docs" value
         *
         * @param RpbSearchDoc[] $value
         */
        public function setDocs($value)
        {
            return $this->docs = $value;
        }

        /**
         * Add a new element to "docs"
         *
         * @param RpbSearchDoc $value
         */
        public function addDocs($value)
        {
            $this->docs[] = $value;
        }

        /**
         * Check if "max_score" has a value
         *
         * @return boolean
         */
        public function hasMaxScore()
        {
            return isset($this->max_score);
        }

        /**
         * Clear "max_score" value
         */
        public function clearMaxScore()
        {
            unset($this->max_score);
        }

        /**
         * Get "max_score" value
         * @return \PhpOption\Option of type (float)
         *
         *
         */
        public function getMaxScore()
        {
            return \PhpOption\Option::fromValue($this->max_score);
        }

        /**
         * Set "max_score" value
         *
         * @param float $value
         */
        public function setMaxScore($value)
        {
            return $this->max_score = $value;
        }

        /**
         * Check if "num_found" has a value
         *
         * @return boolean
         */
        public function hasNumFound()
        {
            return isset($this->num_found);
        }

        /**
         * Clear "num_found" value
         */
        public function clearNumFound()
        {
            unset($this->num_found);
        }

        /**
         * Get "num_found" value
         * @return \PhpOption\Option of type (int)
         *
         *
         */
        public function getNumFound()
        {
            return \PhpOption\Option::fromValue($this->num_found);
        }

        /**
         * Set "num_found" value
         *
         * @param int $value
         */
        public function setNumFound($value)
        {
            return $this->num_found = $value;
        }
    }
}
